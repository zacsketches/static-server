{"version":3,"sources":["components/Navigation/Navigation.js","components/MainMenu/MainMenu.js","components/Logging/Logging.js","components/Simulation/Simulation.js","components/Modbus/Modbus.js","components/ViewCapture/ViewCapture.js","components/ManualSetup/ManualSetup.js","components/Script/Script.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","style","width","className","to","textDecoration","React","PureComponent","withRouter","MainMenu","props","Container","type","Logging","Simulation","Modbus","state","captureAll","v1send","v1receive","v1both","handleBothChange","event","target","name","value","checked","setState","handleChange","id","onChange","this","Table","striped","bordered","hover","variant","Component","ViewCapture","url","height","position","require","ManualSetup","valves","FP2","FPT2","FFM2","FPT4","FFM4","FRV2","FFMV2","engine","SRD","installDefaultFactories","model","setPosition","FMV2","map","node","addListener","selectionChanged","e","prevState","handleClick","addAll","setLocked","diagramEngine","allowLooseLinks","allowCanvasTranslation","allowCanvasZoom","setDiagramModel","key","marginLeft","Script","useState","setEvent","event2","setEvent2","setName","onSubmit","preventDefault","alert","placeholder","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a474ca3.chunk.js","sourcesContent":["import React from 'react';\nimport { withRouter, Link } from 'react-router-dom';\n\nclass Navigation extends React.PureComponent {\n    render() {\n        return (\n        <div style={{ width: \"100%\" }}>\n          <nav className=\"navbar navbar-expand-lg px-0\">\n            <div className=\"container-fluid m-0\">\n              <div className=\"col-md-6 align-self-start\">\n                <h6 className=\"text-white text-left\">\n                </h6>\n                <button className=\"btn btn-secondary p-0 float-left\">\n                  <span>\n                    <Link\n                      className=\"text-white nav-link text-left\"\n                      to=\"/\"\n                      style={{ textDecoration: 'none' }}\n                    >\n                      <p className=\"m-0\">\n                        <strong>Home</strong>\n                      </p>\n                    </Link>\n                  </span>\n                </button>\n              </div>\n              <div className=\"col-md-6\">\n                <h6 className=\"text-white text-right\">\n                </h6>\n              </div>\n            </div>\n          </nav>\n        </div>\n      );\n    }\n  }\n  \n\nexport default withRouter(Navigation);\n\n\n\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\n\n\nconst MainMenu = (props) => {\n    return (\n        <Container>\n            <h1>Main Menu</h1>\n            <Link to=\"/logging\" style={{ textDecoration: 'none' }}>\n                <button type=\"button\" className=\"btn btn-secondary btn-lg\" style={{ textDecoration: 'none', width: \"100%\" }}>  \n                    Logging\n                </button>\n                </Link>\n            <Link to=\"/simulation\" style={{ textDecoration: 'none' }}>\n                <button type=\"button\" className=\"btn btn-secondary btn-lg\" style={{ textDecoration: 'none', width: \"100%\" }}>  \n                    Simulation\n                </button>\n            </Link>\n        </Container>\n        )\n    }\n\nexport default MainMenu;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\n\n\nconst Logging = (props) => {\n    return (\n        <Container>\n            <h1>Logging</h1>\n            <Link to=\"/modbus\" style={{ textDecoration: 'none' }}>\n                <button type=\"button\" className=\"btn btn-secondary btn-lg\" style={{ textDecoration: 'none', width: \"100%\" }}>  \n                    RS-485 MODBUS Setup\n                </button>\n            </Link>\n                <button type=\"button\" className=\"btn btn-secondary btn-lg\" style={{ textDecoration: 'none', width: \"100%\" }}>  \n                    Start Script\n                </button>\n                <button type=\"button\" className=\"btn btn-secondary btn-lg\" style={{ textDecoration: 'none', width: \"100%\" }}>  \n                    Start Capture\n                </button>\n            <Link to=\"/viewcapture\" style={{ textDecoration: 'none' }}>\n                <button type=\"button\" className=\"btn btn-secondary btn-lg\" style={{ textDecoration: 'none', width: \"100%\" }}>  \n                    View Capture\n                </button>\n            </Link>\n        </Container>\n    )\n}\n\nexport default Logging;\n\n\n            \n\n\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Container } from 'react-bootstrap';\n\nconst Simulation = (props) => {\n    return (\n        <Container>\n            <h1>Simulation</h1>\n            <Link to=\"/manualsetup\" style={{ textDecoration: 'none' }}>\n                <button type=\"button\" className=\"btn btn-secondary btn-lg\" style={{ textDecoration: 'none', width: \"100%\" }}>  \n                    Manual\n                </button>\n            </Link>\n            <Link to=\"/script\" style={{ textDecoration: 'none' }}>\n                <button type=\"button\" className=\"btn btn-secondary btn-lg\" style={{ textDecoration: 'none', width: \"100%\" }}>  \n                    Scripted\n                </button>\n            </Link>\n        </Container>\n    )\n}\n\nexport default Simulation;","import React from 'react';\nimport { Container, Table } from 'react-bootstrap';\nimport { AllCheckerCheckbox, Checkbox, CheckboxGroup } from '@createnl/grouped-checkboxes';\n\nclass Modbus extends React.Component {\n    state = {\n      captureAll:false, \n      v1send:false,\n      v1receive:false,\n      v1both:false\n    }\n\n\nhandleBothChange = (event) => {\n    const {name, value, checked} = event.target\n    // type === \"checkbox\" ? \n    //     this.setState({\n    //         [name]: checked\n    //     })\n    // :\n    name === \"v1both\" && checked === true ?\n        this.setState({\n            v1both:true,\n            v1send: true,\n            v1receive: true\n        })\n    :\n    name === \"v1both\" && checked === false ?\n    this.setState({\n        v1both:false,\n        v1send: false,\n        v1receive: false\n    })\n    :\n    this.setState({\n        [name]: value\n    }) \n  }\nhandleChange = (event) => {\n    const {name, value, type, checked} = event.target\n    type === \"checkbox\" ? \n        this.setState({\n            [name]: checked\n        })\n    :\n    this.setState({\n        [name]: value\n    }) \n  }\n  \n  render() {\n\n    return (\n\n        <div>\n        <h1>Modbus</h1>\n        <AllCheckerCheckbox\n            id=\"captureAll\"\n            name=\"captureAll\"\n            onChange={this.handleChange}\n            checked={this.state.captureAll}\n        />Capture All\n    <Container>\n        <Table striped bordered hover variant=\"dark\">\n        <thead>\n            <tr>\n            <th>Device</th>\n            <th>Sent</th>\n            <th>Received</th>\n            <th>Both</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n            <td>Valve 1</td>\n            <CheckboxGroup>  \n            <td>\n                <Checkbox\n                    id=\"v1send\"\n                    name=\"v1send\"\n                    onChange={this.handleChange}\n                    checked={this.state.v1send}\n                />\n            </td>\n            <td>        \n                <Checkbox\n                    id=\"v1receive\"\n                    name=\"v1receive\"\n                    onChange={this.handleChange}\n                    checked={this.state.v1receive}  \n                />\n            </td>\n            <td>\n                <AllCheckerCheckbox    \n                    id=\"v1both\"    \n                    name=\"v1both\"\n                    onChange={this.handleBothChange}\n                    checked={this.state.v1both}\n                />\n            </td>\n            </CheckboxGroup>\n            </tr>\n            <tr>\n            <td>Valve 2</td>\n            <CheckboxGroup> \n            <td>        \n                <Checkbox\n                    id=\"v2send\" \n                    name=\"v2send\"\n                />\n            </td>\n            <td>        \n                <Checkbox \n                    id=\"v2receive\"\n                    name=\"v2receive\"\n                />\n            </td>\n            <td>        \n                <AllCheckerCheckbox\n                    id=\"v2both\"\n                    name=\"v2both\"\n                />\n            </td>\n            </CheckboxGroup>\n            </tr>\n            <tr>\n            <td>Pump 1</td>\n            <CheckboxGroup> \n            <td>        \n                <Checkbox\n                    id=\"p1send\"\n                    name=\"p1send\"\n                />\n            </td>\n            <td>        \n                <Checkbox\n                    id=\"p1receive\"\n                    name=\"p1receive\"\n                />\n            </td>\n            <td>        \n                <AllCheckerCheckbox\n                    id=\"p1both\"\n                    name=\"p1both\"\n                />\n            </td>\n            </CheckboxGroup>\n            </tr>\n            <tr>\n            <td>Pump 2</td>\n            <CheckboxGroup> \n            <td>        \n                <Checkbox\n                    id=\"p2send\"\n                    name=\"p2send\"\n                />\n            </td>\n            <td>        \n                <Checkbox\n                    id=\"p2receive\"\n                    name=\"p2receive\"\n                />\n            </td>\n            <td>        \n                <AllCheckerCheckbox\n                    id=\"p2both\"\n                    name=\"p2both\"\n                />\n            </td>\n            </CheckboxGroup>\n            </tr>\n            <tr>\n            <td>Pressure Sensor 1 </td>\n            <CheckboxGroup> \n            <td>        \n                <Checkbox\n                    id=\"ps1send\"\n                    name=\"ps1send\"\n                />\n            </td>\n            <td>        \n                <Checkbox\n                    id=\"ps1receive\"\n                    name=\"ps1receive\"\n                />\n            </td>\n            <td>        \n                <AllCheckerCheckbox\n                    id=\"ps1both\"\n                    name=\"ps1both\"\n                />\n            </td>\n            </CheckboxGroup>\n            </tr>\n            <tr>\n            <td>Pressure Sensor 2</td>\n            <CheckboxGroup> \n            <td>        \n                <Checkbox\n                    id=\"ps2send\"\n                    name=\"ps2send\"\n                />\n            </td>\n            <td>        \n                <Checkbox\n                    id=\"ps2receive\"\n                    name=\"ps2receive\"\n                />\n            </td>\n            <td>        \n                <AllCheckerCheckbox\n                    id=\"ps2both\"\n                    name=\"ps2both\"\n                />\n            </td>\n            </CheckboxGroup>\n            </tr>\n            <tr>\n            <td>Pressure Sensor 3</td>\n            <CheckboxGroup> \n            <td>        \n                <Checkbox\n                    id=\"ps3send\"\n                    name=\"ps3send\"\n                />\n            </td>\n            <td>        \n                <Checkbox\n                    id=\"ps3receive\"\n                    name=\"ps3receive\"\n                />\n            </td>\n            <td>        \n                <AllCheckerCheckbox\n                    id=\"ps3both\"\n                    name=\"ps3both\"\n                />\n            </td>\n            </CheckboxGroup>\n            </tr>\n            <tr>\n            <td>Pressure Sensor 4</td>\n            <CheckboxGroup> \n            <td>        \n                <Checkbox\n                    id=\"ps4send\"\n                    name=\"ps4send\"\n                />\n            </td>\n            <td>        \n                <Checkbox\n                    id=\"ps4recieve\"\n                    name=\"ps4receive\"\n                />\n            </td>\n            <td>        \n                <AllCheckerCheckbox\n                    id=\"ps4both\"\n                    name=\"ps4both\"\n                />\n            </td>\n            </CheckboxGroup>\n            </tr>\n        </tbody>\n    </Table>\n</Container> \n</div>\n    )\n  }\n}\n\nexport default Modbus;\n\n\n// import React, {Component} from 'react';\n// import { Container, Table } from 'react-bootstrap';\n// import { AllCheckerCheckbox, Checkbox, CheckboxGroup } from '@createnl/grouped-checkboxes';\n\n// class Modbus extends Component {\n   \n//     handleChange = (event) => {\n//         const {name, value, type, checked} = event.target\n//         type === \"checkbox\" ? \n//             this.setState({\n//                 [name]: checked\n//             })\n//         :\n//         this.setState({\n//             [name]: value\n//         }) \n//     }\n\n//     render() {\n        \n//     return (\n//         <div>\n//             <h1>Modbus</h1>\n//             <CheckboxGroup> \n//                 <AllCheckerCheckbox\n//                     id=\"captureAll\"\n//                     name=\"captureAll\"\n//                 />Capture All\n//                 <Container>\n//                     <Table striped bordered hover variant=\"dark\">\n//                         <thead>\n//                             <tr>\n//                             <th>Device</th>\n//                             <th>Sent</th>\n//                             <th>Received</th>\n//                             {/* <th>Both</th> */}\n//                             </tr>\n//                         </thead>\n//                         <tbody>\n//                             <tr>\n//                             <td>Valve 1</td>\n//                             <td>\n//                                 <Checkbox\n//                                     id=\"v1send\"\n//                                     name=\"v1send\"\n//                                     onChange={this.handleChange}\n//                                 />\n//                             </td>\n//                             <td>        \n//                                 <Checkbox\n//                                     id=\"v1receive\"\n//                                     name=\"v1receive\"\n//                                     onChange={this.handleChange}  \n//                                 />\n//                             </td>\n//                             </tr>\n//                             <tr>\n//                             <td>Valve 2</td>\n//                             <td>        \n//                                 <Checkbox\n//                                     id=\"v2send\" \n//                                     name=\"v2send\"\n//                                     onChange={this.handleChange}\n//                                 />\n//                             </td>\n//                             <td>        \n//                                 <Checkbox \n//                                     id=\"v2receive\"\n//                                     name=\"v2receive\"\n//                                     onChange={this.handleChange}\n//                                 />\n//                             </td>\n//                             </tr>\n//                             <tr>\n//                             <td>Pump 1</td>\n//                             <td>        \n//                                 <Checkbox\n//                                     id=\"p1send\"\n//                                     name=\"p1send\"\n//                                     onChange={this.handleChange}\n//                                 />\n//                             </td>\n//                             <td>        \n//                                 <Checkbox\n//                                     id=\"p1receive\"\n//                                     name=\"p1receive\"\n//                                     onChange={this.handleChange}\n//                                 />\n//                             </td>\n//                             </tr>\n//                             <tr>\n//                             <td>Pump 2</td>\n//                             <td>        \n//                                 <Checkbox\n//                                     id=\"p2send\"\n//                                     name=\"p2send\"\n//                                     onChange={this.handleChange}\n//                                 />\n//                             </td>\n//                             <td>        \n//                                 <Checkbox\n//                                     id=\"p2receive\"\n//                                     name=\"p2receive\"\n//                                     onChange={this.handleChange}\n//                                 />\n//                             </td>\n//                             </tr>\n//                             <tr>\n//                             <td>Pressure Sensor 1 </td>\n//                             <td>        \n//                                 <Checkbox\n//                                     id=\"ps1send\"\n//                                     name=\"ps1send\"\n//                                     onChange={this.handleChange}\n//                                 />\n//                             </td>\n//                             <td>        \n//                                 <Checkbox\n//                                     id=\"ps1receive\"\n//                                     name=\"ps1receive\"\n//                                     onChange={this.handleChange}\n//                                 />\n//                             </td>\n//                             </tr>\n//                             <tr>\n//                             <td>Pressure Sensor 2</td>\n//                             <td>        \n//                                 <Checkbox\n//                                     id=\"ps2send\"\n//                                     name=\"ps2send\"\n//                                     onChange={this.handleChange}\n//                                 />\n//                             </td>\n//                             <td>        \n//                                 <Checkbox\n//                                     id=\"ps2receive\"\n//                                     name=\"ps2receive\"\n//                                     onChange={this.handleChange}\n//                                 />\n//                             </td>\n//                             </tr>\n//                             <tr>\n//                             <td>Pressure Sensor 3</td>\n//                             <td>        \n//                                 <Checkbox\n//                                     id=\"ps3send\"\n//                                     name=\"ps3send\"\n//                                     onChange={this.handleChange}\n//                                 />\n//                             </td>\n//                             <td>        \n//                                 <Checkbox\n//                                     id=\"ps3receive\"\n//                                     name=\"ps3receive\"\n//                                     onChange={this.handleChange}\n//                                 />\n//                             </td>\n//                             </tr>\n//                             <tr>\n//                             <td>Pressure Sensor 4</td>\n//                             <td>        \n//                                 <Checkbox\n//                                     id=\"ps4send\"\n//                                     name=\"ps4send\"\n//                                     onChange={this.handleChange}\n//                                 />\n//                             </td>\n//                             <td>        \n//                                 <Checkbox\n//                                     id=\"ps4recieve\"\n//                                     name=\"ps4receive\"\n//                                     onChange={this.handleChange}\n//                                 />\n//                             </td>\n//                             </tr>\n//                         </tbody>\n//                     </Table>\n//                 </Container> \n//             </CheckboxGroup>\n//         </div>\n//         )\n//     }\n// }\n\n// export default Modbus;","import React from 'react';\nimport Iframe from 'react-iframe';\nimport { Container } from 'react-bootstrap';\n\nconst ViewCapture = (props) => {\n    return (\n        <Container>\n        <h1>View Capture</h1>\n            <div className=\"d-flex justify-content-center\">\n                <Iframe\n        //          src={`/coursecontent/SCORMDriver/indexAPI.html?username=${username}`}\n                    url=\"http://www.wireshark.com\"\n                    width=\"1400px\"\n                    height=\"800px\"\n                    id=\"iframe1\"\n                    position=\"relative\" >       \n                </Iframe>\n            </div>\n        </Container>\n    )\n}\n\nexport default ViewCapture;\n","import React from 'react';\nimport * as SRD from \"storm-react-diagrams\"\nrequire(\"storm-react-diagrams/dist/style.min.css\")\n\nclass ManualSetup extends React.Component {\n  state = {\n    valves: {FP2: 'OFF', FPT2: 'OFF', FFM2: 'OFF', \n    FPT4: 'OFF', FFM4: 'OFF', FRV2: 'OFF', FFMV2:'OFF'\n }\n}\n  // FFM2: 'OFF', FFM4: 'OFF', FMV2: 'OFF', FFM1: 'OFF', FFM3: 'OFF', FMV1: 'OFF', \n  // FFM010:'OFF', FFM011: 'OFF', FMV16: 'OFF', FMV18: 'OFF', FMV20: 'OFF', \n  // FMV12: 'OFF', FMV14: 'OFF'\n\nrender() {\n\n// 1) setup the diagram engine\nvar engine = new SRD.DiagramEngine();\nengine.installDefaultFactories();\n\n// 2) setup the diagram model\nvar model = new SRD.DiagramModel();\n\n\nvar FP2 = new SRD.DefaultNodeModel(\"FP2\", \"blue\");\n// let port1 = FP2.addOutPort(' ');\nFP2.setPosition(360, 311);\n// FP2.selected = true\n\nvar FPT2 = new SRD.DefaultNodeModel(\"FPT2\", \"blue\");\n// let port2 = FPT2.addInPort(' ');\n// let port3 = FPT2.addOutPort(' ')\nFPT2.setPosition(410,182);\n\nvar FFM2 = new SRD.DefaultNodeModel(\"FFM2\", \"blue\");\n// let port4 = FFM2.addInPort(' ');\n// let port5 = FFM2.addOutPort(' ')\nFFM2.setPosition(443, 278);\n\n// var FCV2 = new SRD.DefaultNodeModel(\"FCV2\", \"blue\");\n// let port6 = FCV2.addInPort(' ');\n// let port7 = FCV2.addOutPort(' ')\n// FCV2.setPosition(385, 160);\n\n// var FRV0 = new SRD.DefaultNodeModel(\"FRV0\", \"blue\");\n// let port8 = FRV0.addInPort(' ');\n// let port9 = FRV0.addOutPort(' ')\n// FRV0.setPosition(435, 200);\n\nvar FPT4 = new SRD.DefaultNodeModel(\"FPT4\", \"blue\");\n// let port10 = FPT4.addInPort(' ');\n// let port11 = FPT4.addOutPort(' ')\nFPT4.setPosition(605, 182);\n\nvar FFM4 = new SRD.DefaultNodeModel(\"FFM4\", \"blue\");\n// let port12 = FFM4.addInPort(' ');\n// let port13 = FFM4.addOutPort(' ')\nFFM4.setPosition(665, 278);\n\nvar FRV2= new SRD.DefaultNodeModel(\"FRV2\", \"blue\");\n// let port14 = FRV2.addInPort(' ');\n// let port15 = FRV2.addOutPort(' ')\nFRV2.setPosition(742, 190);\n\nvar FMV2= new SRD.DefaultNodeModel(\"FMV2\", \"blue\");\n// let port16 = FMV2.addInPort(' ');\n// let port17 = FMV2.addOutPort(' ')\nFMV2.setPosition(780, 285);\n\n// var FCV12= new SRD.DefaultNodeModel(\"FCV12\", \"green\");\n// // let port18 = FCV12.addInPort(' ');\n// // let port19 = FCV12.addOutPort(' ')\n// FCV12.setPosition(685, 160);\n\n// var FRV010= new SRD.DefaultNodeModel(\"FRV010\", \"green\");\n// // let port20 = FRV010.addInPort(' ');\n// // let port21 = FRV010.addOutPort(' ')\n// FRV010.setPosition(755, 210);\n\n// var FP1 = new SRD.DefaultNodeModel(\"FP1\", \"blue\");\n// // let port22 = FP1.addOutPort(' ');\n// FP1.setPosition(235, 260);\n\n// var FPT1 = new SRD.DefaultNodeModel(\"FPT1\", \"blue\");\n// let port23 = FPT1.addInPort(' ');\n// let port24 = FPT1.addOutPort(' ')\n// FPT1.setPosition(285, 250);\n\n// var FFM1 = new SRD.DefaultNodeModel(\"FFM1\", \"blue\");\n// let port25 = FFM1.addInPort(' ');\n// let port26 = FFM1.addOutPort(' ')\n// FFM1.setPosition(335, 260);\n\n// var FCV1 = new SRD.DefaultNodeModel(\"FCV1\", \"blue\");\n// let port27 = FCV1.addInPort(' ');\n// let port28 = FCV1.addOutPort(' ')\n// FCV1.setPosition(385, 260);\n\n// // var FRV0 = new SRD.DefaultNodeModel(\"FRV0\", \"blue\");\n// // let port29 = FRV0.addInPort(' ');\n// // let port30 = FRV0.addOutPort(' ')\n// // FRV0.setPosition(435, 200);\n\n// var FPT3 = new SRD.DefaultNodeModel(\"FPT3\", \"blue\");\n// let port31 = FPT3.addInPort(' ');\n// let port32 = FPT3.addOutPort(' ')\n// FPT3.setPosition(485, 250);\n\n// var FFM3 = new SRD.DefaultNodeModel(\"FFM3\", \"blue\");\n// let port33 = FFM3.addInPort(' ');\n// let port34 = FFM3.addOutPort(' ')\n// FFM3.setPosition(535, 260);\n\n// var FRV1= new SRD.DefaultNodeModel(\"FRV2\", \"blue\");\n// let port35 = FRV1.addInPort(' ');\n// let port36 = FRV1.addOutPort(' ')\n// FRV1.setPosition(585, 260);\n\n// var FMV1= new SRD.DefaultNodeModel(\"FMV1\", \"blue\");\n// let port37 = FMV1.addInPort(' ');\n// let port38 = FMV1.addOutPort(' ')\n// FMV1.setPosition(635, 280);\n\n// var FCV11= new SRD.DefaultNodeModel(\"FCV11\", \"green\");\n// let port39 = FCV11.addInPort(' ');\n// let port40 = FCV11.addOutPort(' ')\n// FCV11.setPosition(685, 260);\n\n// var FP010 = new SRD.DefaultNodeModel(\"FP010\", \"green\");\n// let port41 = FP010.addOutPort(' ');\n// FP010.setPosition(235, 360);\n\n// var FPT010 = new SRD.DefaultNodeModel(\"FPT010\", \"green\");\n// let port42 = FPT010.addInPort(' ');\n// let port43 = FPT010.addOutPort(' ')\n// FPT010.setPosition(285, 350);\n\n// var FFM010 = new SRD.DefaultNodeModel(\"FFM010\", \"green\");\n// let port44 = FFM010.addInPort(' ');\n// let port45 = FFM010.addOutPort(' ')\n// FFM010.setPosition(335, 360);\n\n// var FCV010 = new SRD.DefaultNodeModel(\"FCV010\", \"green\");\n// let port46 = FCV010.addInPort(' ');\n// let port47 = FCV010.addOutPort(' ')\n// FCV010.setPosition(385, 360);\n\n// var FPT011 = new SRD.DefaultNodeModel(\"FPT011\", \"green\");\n// let port48 = FPT011.addInPort(' ');\n// let port49 = FPT011.addOutPort(' ')\n// FPT011.setPosition(485, 350);\n\n// var FFM011 = new SRD.DefaultNodeModel(\"FFM011\", \"green\");\n// let port50 = FFM011.addInPort(' ');\n// let port51 = FFM011.addOutPort(' ')\n// FFM011.setPosition(535, 360);\n\n// var FRV012= new SRD.DefaultNodeModel(\"FRV012\", \"green\");\n// let port52 = FRV012.addInPort(' ');\n// let port53 = FRV012.addOutPort(' ')\n// FRV012.setPosition(585, 360);\n\n// var FRV011= new SRD.DefaultNodeModel(\"FRV011\", \"green\");\n// let port54 = FRV011.addInPort(' ');\n// let port55 = FRV011.addOutPort(' ')\n// FRV011.setPosition(755, 310);\n\n// var FRV12= new SRD.DefaultNodeModel(\"FRV12\", \"green\");\n// let port56 = FRV12.addInPort(' ');\n// let port57 = FRV12.addOutPort(' ')\n// FRV12.setPosition(755, 110);\n\n// var FMV12= new SRD.DefaultNodeModel(\"FMV12\", \"green\");\n// let port64 = FMV12.addInPort(' ')\n// let port65 = FMV12.addOutPort(' ')\n// FMV12.setPosition(655, 60);\n\n// var FMV14= new SRD.DefaultNodeModel(\"FMV14\", \"green\");\n// let port66 = FMV14.addInPort(' ');\n// let port67 = FMV14.addOutPort(' ')\n// FMV14.setPosition(705, 60);\n\n// var FMV16= new SRD.DefaultNodeModel(\"FMV16\", \"green\");\n// let port58 = FMV16.addInPort(' ');\n// let port59 = FMV16.addOutPort(' ')\n// FMV16.setPosition(755, 60);\n\n// var FMV18= new SRD.DefaultNodeModel(\"FMV18\", \"green\");\n// let port60 = FMV18.addInPort(' ');\n// let port61 = FMV18.addOutPort(' ')\n// FMV18.setPosition(805, 60);\n\n// var FMV20= new SRD.DefaultNodeModel(\"FMV20\", \"green\");\n// let port62 = FMV20.addInPort(' ');\n// let port63 = FMV20.addOutPort(' ')\n// FMV20.setPosition(855, 60);\n\n// var FRV5= new SRD.DefaultNodeModel(\"FRV5\", \"green\");\n// let port68 = FRV5.addInPort(' ');\n// let port69 = FRV5.addOutPort(' ')\n// FRV5.setPosition(855, 310);\n\n// var FRV3= new SRD.DefaultNodeModel(\"FRV3\", \"green\");\n// let port70 = FRV3.addInPort(' ');\n// let port71 = FRV3.addOutPort(' ')\n// FRV3.setPosition(855, 260);\n\n// var FRV11= new SRD.DefaultNodeModel(\"FRV11\", \"green\");\n// let port72 = FRV11.addInPort(' ');\n// let port73 = FRV11.addOutPort(' ')\n// FRV11.setPosition(905, 260);\n\n// var FRV13= new SRD.DefaultNodeModel(\"FRV13\", \"green\");\n// let port74 = FRV13.addInPort(' ');\n// let port75 = FRV13.addOutPort(' ')\n// FRV13.setPosition(955, 260);\n\n// var FRV15= new SRD.DefaultNodeModel(\"FRV15\", \"green\");\n// let port76 = FRV15.addInPort(' ');\n// let port77 = FRV15.addOutPort(' ')\n// FRV15.setPosition(1005, 260);\n\n// // FRV15.selected = true\n\n// var Eductor = new SRD.DefaultNodeModel(\"Eductor\", \"green\");\n// let port78 = Eductor.addInPort(' ');\n// let port79 = Eductor.addOutPort(' ')\n// Eductor.setPosition(930, 360);\n\n// 5) link the ports\n// let link1 = port1.link(port19);\n// link1.addLabel('Example Label')\n\n// let link2 = port22.link(port39);\n// let link3 = port41.link(port52);\n// let link4 = port54.link(port58);\n// let linkRA = port64.link(port1)\n\n  const handleClick = (node) => {\n    const {name} = node \n    this.setState(prevState => {\n      return {\n        valves: {\n          ...prevState.valves,\n          [name]:'ON'\n        }\n      }\n    })\n  }\n\n  // const handleRemoveClick = (node) => {\n  //   const {name} = node \n  // // console.log(node.isSelected())\n  //   this.setState(prevState => {\n  //     return {\n  //       valves: {\n  //         ...prevState.valves,\n  //         [name]:false\n  //       }\n  //     }\n  //   })\n  // // console.log(name,selected,color)\n  // }\n\n\nconst selectableNodes = [FP2, FPT2, FFM2, FPT4, FFM4, FMV2, FRV2]\n// FFM2, FFM4, FMV2, FFM1, FFM3, FMV1, FFM010, FFM011,FMV16,\n//   FMV18, FMV20, FMV12, FMV14\n\n  selectableNodes.map((node) => node.addListener({selectionChanged: (e) => {handleClick(node)}}))\n  // // selectableNodes.map((node) => node.addListener({entityRemoved: () => {handleRemoveClick(node)}}))\n\n\n\n  // console.log(addClick)\n\n// 6) add the models to the root graph\n\n// FCV2, FRV0,FCV12, \n  // FRV010, FP1, FPT1, FFM1, FCV1, FPT3, FFM3, FRV1, FMV1, FCV11, FP010, \n  // FPT010, FFM010, FCV010, FPT011, FFM011, FRV012, FRV011, FRV12, FMV16,\n  // FMV18, FMV20, FMV12, FMV14, FRV5, FRV3, FRV11, FRV13, FRV15, Eductor,\n  // link1, link2, link3, link4\n\nmodel.addAll(FP2, FPT2, FFM2, FPT4, FFM4, FRV2, FMV2);\n\n//   model.addListener({\n//     nodesUpdated: e => console.log(\"nodesUpdated\", e),\n//     linksUpdated: e => console.log(\"linksUpdated\", e),\n    \n//     // these are never triggered\n//     zoomUpdated: e => console.log(\"zoomUpdated\", e),\n//     gridUpdated: e => console.log(\"gridUpdated\", e),\n//     offsetUpdated: e => console.log(\"offsetUpdated\", e),\n//     entityRemoved: e => console.log(\"entityRemoved\", e),\n//     selectionChanged: e => console.log(\"selectionChanged\", e)\n// });\n\nmodel.setLocked(true);\n\nvar props = {\n  diagramEngine: engine,\n  allowLooseLinks: false,\n  allowCanvasTranslation: false,\n  allowCanvasZoom: false\n} \n\n// 7) load model into engine\nengine.setDiagramModel(model);\n\n\n  return (\n\n    \n    <div className=\"App\">\n      <SRD.DiagramWidget diagramEngine={engine} key={engine.id} \n      {...props}\n      />\n      <div style={{marginLeft:40}}>\n      <h2>Valves</h2>\n      <table>\n        <tbody>\n          {/* <tr>\n            <td>FFM1:{this.state.valves.FFM1}</td>\n            <td>FFM010:{this.state.valves.FFM010}</td>\n            <td>FMV1:{this.state.valves.FMV1}</td>\n            <td>FMV14:{this.state.valves.FMV14}</td>\n          </tr>\n          <tr>\n            <td>FFM2:{this.state.valves.FFM2}</td>\n            <td>FFM011:{this.state.valves.FFM011}</td>\n            <td>FMV2:{this.state.valves.FMV2}</td>\n            <td>FMV16:{this.state.valves.FMV16}</td>\n          </tr>\n          <tr>\n            <td>FFM3:{this.state.valves.FFM3}</td>\n            <td>FMV12:{this.state.valves.FMV12}</td>\n            <td>FFM4:{this.state.valves.FFM4}</td>\n            <td>FMV18:{this.state.valves.FMV18}</td>\n          </tr>\n          <tr>\n            <td>FMV20:{this.state.valves.FMV20}</td>\n          </tr> */}\n        </tbody>\n      </table>\n      </div>\n    </div>\n\n  );\n}\n}\n\nexport default ManualSetup;","import React, { useState } from 'react';\nimport { Container } from 'react-bootstrap';\n\nconst Script = (props) => {\n\n    const [event,setEvent] = useState(\"\");\n    const [event2,setEvent2] = useState(\"\");\n    const [name,setName] = useState(\"\")\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        alert(\"Event added\")\n    }\n\n    return (\n        <Container>\n\n            <h1>Events</h1>\n            <form onSubmit={handleSubmit}>\n                <label>\n                    <input\n                        onChange={e => setName(e.target.value)}\n                        type=\"text\"\n                        name=\"name\"\n                        placeholder=\"Name\"\n                        value={name}\n                    />\n                </label>\n                <br />\n                <label>\n                    <input\n                        onChange={e => setEvent(e.target.value)}\n                        type=\"text\"\n                        name=\"event\"\n                        placeholder=\"Event\"\n                        value={event}\n                    />\n                </label>\n                <br />\n                <label>\n                    <input\n                        onChange={e => setEvent2(e.target.value)}\n                        type=\"text\"\n                        name=\"event2\"\n                        placeholder=\"Event\"\n                        value={event2}\n                    />\n                </label>\n                <br />\n\n                <button type=\"submit\" value=\"Add Event\"className=\"btn btn-secondary btn-lg\" style={{ textDecoration: 'none', width: \"80%\" }}>  \n                    Add Event\n        </button>\n            </form>\n\n            \n        </Container>\n            )\n}\n\nexport default Script;","import React from 'react';\nimport Navigation from './components/Navigation/Navigation';\nimport MainMenu from './components/MainMenu/MainMenu';\nimport Logging from './components/Logging/Logging';\nimport Simulation from './components/Simulation/Simulation';\nimport Modbus from './components/Modbus/Modbus';\nimport ViewCapture from './components/ViewCapture/ViewCapture';\nimport ManualSetup from './components/ManualSetup/ManualSetup';\nimport Script from './components/Script/Script';\n\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\n\nclass App extends React.Component {\n\nrender() {\n  return (\n\n    <Router>\n      <div>\n        <Navigation>\n          <ul>\n            <li>\n              <Link to=\"/\" style={{ textDecoration: 'none' }}>Home</Link>\n            </li>\n          </ul>\n        </Navigation>\n\n        <Switch>\n          <Route exact path=\"/\">\n            <MainMenu />\n          </Route>\n          <Route path=\"/logging\">\n            <Logging />\n          </Route>\n          <Route path=\"/simulation\">\n            <Simulation />\n          </Route>\n          <Route path=\"/modbus\">\n            <Modbus \n              handleChange={this.handleChange}\n              // captureAll={this.state.captureAll} \n            />\n          </Route>\n          <Route path=\"/viewcapture\">\n            <ViewCapture />\n          </Route>\n          <Route path=\"/manualsetup\">\n            <ManualSetup />\n          </Route>\n          <Route path=\"/script\">\n            <Script />\n          </Route>\n        </Switch>\n      \n      </div>\n    </Router>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}